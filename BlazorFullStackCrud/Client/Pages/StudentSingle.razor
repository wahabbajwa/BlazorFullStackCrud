@page "/studentsingle"
@page "/studentsingle/{id:int}"
@inject IStudentService StudentService

@if (Id == null)
{
    <PageTitle>Create a new Student</PageTitle>
    <h3>Create a new Student</h3>
}
else
{
    <PageTitle>Edit @studentsingle.StuentName</PageTitle>
    <h3>Edit @studentsingle.Course</h3>
}

<EditForm Model="hero" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="studentsingle.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="studentsingle.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="heroname">Hero Name</label>
        <InputText id="heroname" @bind-Value="studentsingle.Course" class="form-control"></InputText>
    </div>
    <div>
        <label>Comic</label><br />
        <InputSelect @bind-Value="studentsingle.DepartmentId" class="form-select">
            @foreach (var std in StudentService.Department)
            {
                <option value="@std.Id">@std.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="Deletestudent">Delete Student</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Student student= new Student { Department = new Department() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Student" : "Update Student";
        await StudentService.GetDepartment();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            student.Department = StudentService.Department[0];
            student.DepartmentId = student.Department.Id;
        }
        else
        {
            student = await StudentService.GetSingleStudent((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await StudentService.CreateStudent(student);
        }
        else
        {
            await StudentService.UpdateStudent(student);
        }
    }

    async Task DeleteStudent()
    {
        await StudentService.DeleteStudent(student.Id);
    }
}
